package com.edgedo.bigdata.service;

import com.edgedo.bigdata.entity.BigdataDriverCardInfo;
import com.edgedo.bigdata.entity.BigdataDriverCardRec;
import com.edgedo.bigdata.mapper.BigdataDriverCardRecMapper;
import com.edgedo.bigdata.queryvo.BigdataDriverCardRecQuery;
import com.edgedo.bigdata.queryvo.BigdataDriverCardRecView;
import com.edgedo.common.util.Guid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class BigdataDriverCardRecService {
	
	
	@Autowired
	private BigdataDriverCardRecMapper mapper;

	@Autowired
	private BigdataDriverCardInfoService bigdataDriverCardInfoService;

	SimpleDateFormat sdfDateInt = new SimpleDateFormat("yyyyMMdd");
	
	public List<BigdataDriverCardRecView> listPage(BigdataDriverCardRecQuery query){
		List list = mapper.listPage(query);
		query.setList(list);
		return list;
	}
	
	/***
	 * 新增方法
	 * @return
	 */
	public String insert(BigdataDriverCardRec voObj) {
		voObj.setId(Guid.guid());
		mapper.insert(voObj);
		return "";
	}
	
	/***
	 * 动态修改方法
	 * @param
	 * @return
	 */
	public String update(BigdataDriverCardRec voObj) {
		mapper.updateById(voObj);
		return "";
	}
	
	/***
	 * 全修改
	 * @param
	 * @return
	 */
	public String updateAll(BigdataDriverCardRec voObj) {
		mapper.updateAllColumnById(voObj);
		return "";
	}
	
	
	
	/**
	 * 单个删除
	 * @param id
	 */
	public int delete(String id) {
		
		return mapper.deleteById(id);
	}
	
	/**
	 * 批量删除
	 * @param ids
	 */
	public int deleteByIds(List<String> ids) {
		
		return mapper.deleteBatchIds(ids);
	}
	
	
	
	/**
	 * 加载单个
	 * @param id
	 */
	public BigdataDriverCardRec loadById(String id) {
		return mapper.selectById(id);
	}

	/**
	 * 接收司机身份卡插卡和拔卡记录
	 * @param cardRec
	 */
    public void insertAcceptDriverCardRec(BigdataDriverCardRec cardRec) {
		String compId = cardRec.getCompId();
		String bid = cardRec.getBid();
		Map<String,Object> param = new HashMap<String,Object>();
		param.put("compId",compId);
		param.put("bid",bid);
		int count = mapper.countByCompIdAndBid(param);
		if(count==0){
			Date cur = new Date();
			String countDateStr = sdfDateInt.format(cur);
			Integer countDate = new Integer(countDateStr);
			Integer countMonth = countDate/100;
			//将记录插入数据库
			cardRec.setCreateTime(cur);
			cardRec.setCountDate(countDate);
			cardRec.setCountMonth(countMonth);
			//判断记录是否合格
			String carPlateNum = cardRec.getCarPlateNum();
			String carPlateColor = cardRec.getCarPlateColor();
			String licenceNum1 = cardRec.getLicenceNum();
			String driverName = cardRec.getDriverName();
			if(carPlateNum==null || carPlateNum.equals("") ||carPlateColor==null || carPlateColor.equals("")||
			licenceNum1==null || licenceNum1.equals("") || driverName==null || driverName.equals("")){
				cardRec.setQualifiedFlag("0");
			}else {
				cardRec.setQualifiedFlag("1");
			}
			insert(cardRec);
			//更新司机卡的信息
			String licenceNum = cardRec.getLicenceNum();
			BigdataDriverCardInfo bigdataDriverCardInfo = bigdataDriverCardInfoService.selectByLicenceNum(licenceNum);
			if(bigdataDriverCardInfo!=null){
				bigdataDriverCardInfo.setQualifiedFlag(cardRec.getQualifiedFlag());
				bigdataDriverCardInfo.setLastUseTime(new Date());
				bigdataDriverCardInfoService.update(bigdataDriverCardInfo);
			}else {
				BigdataDriverCardInfo bigdataDriverCardInfo1 = new BigdataDriverCardInfo();
				bigdataDriverCardInfo1.setCreateTime(new Date());
				bigdataDriverCardInfo1.setCompId(cardRec.getCompId());
				bigdataDriverCardInfo1.setCompName(cardRec.getCompName());
				bigdataDriverCardInfo1.setDriverName(cardRec.getDriverName());
				bigdataDriverCardInfo1.setCompany(cardRec.getCompany());
				bigdataDriverCardInfo1.setLicenceNum(cardRec.getLicenceNum());
				bigdataDriverCardInfo.setQualifiedFlag(cardRec.getQualifiedFlag());
				bigdataDriverCardInfo.setLastUseTime(new Date());
				bigdataDriverCardInfoService.insert(bigdataDriverCardInfo1);
			}
			//更新车辆月度考核表
		}


    }


	public int countDriverCardUpNum(Map<String, Object> param2) {
		return mapper.countDriverCardUpNum(param2);
	}
}
