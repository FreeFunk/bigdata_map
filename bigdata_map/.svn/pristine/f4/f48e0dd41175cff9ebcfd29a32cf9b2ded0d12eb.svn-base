package com.edgedo.bigdata.controller;


import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.*;

import com.edgedo.common.base.BaseController;
import com.edgedo.bigdata.entity.BigdataFenxiCount;
import com.edgedo.bigdata.queryvo.BigdataFenxiCountQuery;
import com.edgedo.bigdata.service.BigdataFenxiCountService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;


@Api(tags = "BigdataFenxiCount")
@Controller
@RequestMapping("/admin/bigdataFenxiCount")
public class BigdataFenxiCountController extends BaseController{
	
	@Autowired
	private BigdataFenxiCountService service;
	
	/**
	 * 分页查询
	 * @param query
	 * @return
	 */
	@ApiOperation(value = "分页查询BigdataFenxiCount", notes = "分页查询BigdataFenxiCount")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/listpage",method = RequestMethod.POST)
	public ModelAndView listpage(@ModelAttribute BigdataFenxiCountQuery query){
		ModelAndView modelAndView = new ModelAndView();
		service.listPage(query);
		buildResponse(modelAndView,query);
		return modelAndView;
	}
	

	/**
	 * 新增修改
	 * @param voObj
	 * @return
	 */
	@ApiOperation(value = "新增修改BigdataFenxiCount", notes = "新增修改BigdataFenxiCount")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/saveOrUpdate",method = RequestMethod.POST)
	public ModelAndView saveOrUpdate(BigdataFenxiCount voObj){
		ModelAndView modelAndView = new ModelAndView();
		String errMsg = "";
		String id = voObj.getId();
		if(id==null || id.trim().equals("")){
			errMsg = service.insert(voObj);
		}else{
			errMsg = service.update(voObj);
		}
		if(errMsg!=null && !errMsg.equals("")){
			buildErrorResponse(modelAndView, errMsg);
		}else{
			buildResponse(modelAndView);
		}
		return modelAndView;
	}
	
	
	/**
	 * 批量删除
	 * @param ids
	 * @return
	 */
	@ApiOperation(value = "根据ID批量删除BigdataFenxiCount", notes = "根据ID批量删除BigdataFenxiCount")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/deleteByIds",method = RequestMethod.POST)
	public ModelAndView delete(String ids){
		ModelAndView modelAndView = new ModelAndView();
		String[] arr = ids.split(",");
		List<String> list = new ArrayList<String>();
		for(String str : arr){
			list.add(str);
		}
		service.deleteByIds(list);		
		return buildResponse(modelAndView);
	}
	
	
	/**
	 * 根据主键加载
	 * @param id
	 * @return
	 */
	@ApiOperation(value = "根据ID加载BigdataFenxiCount", notes = "根据ID加载BigdataFenxiCount")
	@ApiImplicitParam(name = "access-token", value = "用户登录秘钥", paramType = "header", required = true, dataType = "String")
	@RequestMapping(value = "/loadById",method = RequestMethod.POST)
	public ModelAndView  loadById(String id){
		ModelAndView modelAndView = new ModelAndView();
		return buildResponse(modelAndView, service.loadById(id));
	}


	/**
	 * 设置初始值
	 * @param carType xianQuId timeCount
	 * @return
	 */
	@RequestMapping(value = "/setBaoJinInfo",method = RequestMethod.POST)
	public ModelAndView  setBaoJinInfo(String carType,String xianQuId,String timeCount){
		ModelAndView modelAndView = new ModelAndView();
		//切割字符串
		String[] timeCountArr = timeCount.split("-");
		Integer dateNum = new Integer(timeCountArr[0]+timeCountArr[1]+timeCountArr[2]);

		//当前时间
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
		Date date = new Date();
		String dateStr = simpleDateFormat.format(date);
		String[] dateStrArr = dateStr.split("-");
		Integer dateStrArrdateNum = new Integer(dateStrArr[0]+dateStrArr[1]+dateStrArr[2]);
		List<BigdataFenxiCount> list = service.selectByCarTypeAndXianQuIdAndTimeCount(carType,xianQuId,dateStrArrdateNum,dateNum);
		int baoJingCarNum = 0;//报警车辆数
		int baoJingQiYeNum = 0;//报警企业数
		BigDecimal runNum = new BigDecimal(0);//行驶里程
		int baoJingNum = 0;//常规报警
		int chuLiNum = 0;//处理数量
		int zhuDongAnQuan = 0;//主动安全数量
		int zhuDongChuLiAnQuan = 0;//主动安全处理数量

		for(BigdataFenxiCount bigdataFenxiCount : list){
			baoJingCarNum = baoJingCarNum + bigdataFenxiCount.getAlarmCarNum();
			baoJingQiYeNum = baoJingQiYeNum + bigdataFenxiCount.getAlarmCompNum();
			runNum.add(bigdataFenxiCount.getRunMileage());
			baoJingNum = baoJingNum + bigdataFenxiCount.getCommonAlarmNum();
			chuLiNum = chuLiNum + bigdataFenxiCount.getCommonHandleNum();
			zhuDongAnQuan = zhuDongAnQuan + bigdataFenxiCount.getSafeAlarmNum();
			zhuDongChuLiAnQuan = zhuDongChuLiAnQuan + bigdataFenxiCount.getSafeHandleNum();
		}
		Map<String,Object> map = new HashMap<>();
		map.put("baoJingCarNum",baoJingCarNum);
		map.put("baoJingQiYeNum",baoJingQiYeNum);
		map.put("runNum",runNum);
		map.put("baoJingNum",baoJingNum);
		map.put("chuLiNum",chuLiNum);
		map.put("zhuDongAnQuan",zhuDongAnQuan);
		map.put("zhuDongChuLiAnQuan",zhuDongChuLiAnQuan);
		map.put("list",list);
		return buildResponse(modelAndView,map);
	}

	/**
	 * 设置初始值
	 * @param carType xianQuId timeCount
	 * @return
	 */
	@RequestMapping(value = "/selectXianQu",method = RequestMethod.POST)
	public ModelAndView  selectXianQtring(String carType,String xianQuId,Integer timeCount,
										  String timeChangeAge,String timeChangeWeek,String timeType){
		ModelAndView modelAndView = new ModelAndView();
		List<BigdataFenxiCount> list = new ArrayList<>();
		//进行判断 什么时间类型
		if(timeType.equals("DAY")){
			//前台的时间数据类型  20190919
			//查询改天的 所有的车辆信息
			list = service.selectByDay(carType,xianQuId,timeCount,timeType);
		}else if (timeType.equals("WEEK")){
			list = service.selectByWeek(carType,xianQuId,timeChangeAge,timeChangeWeek,timeType);
		}else if (timeType.equals("MONTH")){
			list = service.selectByMonth(carType,xianQuId,timeCount,timeType);
		}
		int baoJingCarNum = 0;//报警车辆数
		int baoJingQiYeNum = 0;//报警企业数
		BigDecimal runNum = new BigDecimal(0);//行驶里程
		int baoJingNum = 0;//常规报警
		int chuLiNum = 0;//处理数量
		int zhuDongAnQuan = 0;//主动安全数量
		int zhuDongChuLiAnQuan = 0;//主动安全处理数量

		for(BigdataFenxiCount bigdataFenxiCount : list){
			baoJingCarNum = baoJingCarNum + bigdataFenxiCount.getAlarmCarNum();
			baoJingQiYeNum = baoJingQiYeNum + bigdataFenxiCount.getAlarmCompNum();
			runNum.add(bigdataFenxiCount.getRunMileage());
			baoJingNum = baoJingNum + bigdataFenxiCount.getCommonAlarmNum();
			chuLiNum = chuLiNum + bigdataFenxiCount.getCommonHandleNum();
			zhuDongAnQuan = zhuDongAnQuan + bigdataFenxiCount.getSafeAlarmNum();
			zhuDongChuLiAnQuan = zhuDongChuLiAnQuan + bigdataFenxiCount.getSafeHandleNum();
		}
		Map<String,Object> map = new HashMap<>();
		map.put("baoJingCarNum",baoJingCarNum);
		map.put("baoJingQiYeNum",baoJingQiYeNum);
		map.put("runNum",runNum);
		map.put("baoJingNum",baoJingNum);
		map.put("chuLiNum",chuLiNum);
		map.put("zhuDongAnQuan",zhuDongAnQuan);
		map.put("zhuDongChuLiAnQuan",zhuDongChuLiAnQuan);
//		map.put("list",list);
		return buildResponse(modelAndView,map);
	}
	
}
