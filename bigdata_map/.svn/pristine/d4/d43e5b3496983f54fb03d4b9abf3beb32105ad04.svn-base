<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>标题</title>
    <meta name="renderer" content="webkit">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <link rel="stylesheet" href="../../../../../layuiadmin/layui/css/layui.css" media="all">
    <link rel="stylesheet" href="../../../../../layuiadmin/style/admin.css" media="all">
</head>
<body>

<div class="layui-fluid">
    <div class="layui-card">
        <div class="layui-form layui-card-header layuiadmin-card-header-auto">
            <div class="layui-form-item">
                <div class="layui-inline">
                    <label class="layui-form-label">搜索条件1</label>
                    <div class="layui-input-inline">
                        <input type="text" name="queryObj.name" placeholder="请输入" autocomplete="off" class="layui-input">
                    </div>
                </div>
                <div class="layui-inline">
                    <label class="layui-form-label">搜索条件2</label>
                    <div class="layui-input-inline">
                        <input type="text" name="queryObj.name" placeholder="请输入" autocomplete="off" class="layui-input">
                    </div>
                </div>
                <div class="layui-inline">
                    <button class="layui-btn layuiadmin-btn-comm" data-type="reload" lay-submit lay-filter="BigdataFatigueAnalysis-search">
                        <i class="layui-icon layui-icon-search layuiadmin-button-btn"></i>
                    </button>
                </div>
            </div>
        </div>
        <div class="layui-card-body">
            <div style="padding-bottom: 10px;">
                <button class="layui-btn layuiadmin-btn-comm" data-type="batchdel">删除</button>
                <button class="layui-btn layuiadmin-btn-comm" data-type="add">添加</button>
            </div>
            <table id="BigdataFatigueAnalysis-list" lay-filter="BigdataFatigueAnalysis-list"></table>
            <script type="text/html" id="table-BigdataFatigueAnalysis-list">
                <a class="layui-btn layui-btn-normal layui-btn-xs" lay-event="edit"><i class="layui-icon layui-icon-edit"></i>编辑</a>
                <a class="layui-btn layui-btn-danger layui-btn-xs" lay-event="del"><i class="layui-icon layui-icon-delete"></i>删除</a>
            </script>
        </div>
    </div>
</div>
<script src="../../../../../layuiadmin/layui/layui.js"></script>
<script>
        layui.config({
            base: '../../../../../layuiadmin/' //静态资源所在路径
        }).extend({
            index:'lib/index',
            common:'common'
        }).use(['index','table', 'form','common'], function(exports){
            var $ = layui.$
                ,table = layui.table
                ,common = layui.common
                ,admin = layui.admin
                ,form = layui.form;

            //查询
            form.on('submit(BigdataFatigueAnalysis-search)', function(data){
                var field = data.field;

                //执行重载
                table.reload('BigdataFatigueAnalysis-list', {
                    where: field
                });
            });

            /*
            * 定义表格
            * */
            defineTable = function () {
                var headers = layui.admin.getTokenHeader();
                table.render({
                    elem: '#BigdataFatigueAnalysis-list' //指定原始表格的选择器（id选择器）
                    ,url:layui.setter.basePath +'/admin/bigdataFatigueAnalysis/listpage.jsn' //模拟接口
                    ,headers:headers
                    ,method: 'post'
                    ,parseData: function(res){ //res 即为原始返回的数据
                        return {
                            "code": res.success, //解析接口状态
                            "msg": res.errMsg, //解析提示文本
                            "count": res.totalCount, //解析数据长度
                            "data": res.list //解析数据列表
                        };
                    }
                    ,response: {
                        statusCode: true //规定成功的状态码，默认：0
                    }
                    ,cols: [[
                        {type: 'checkbox', fixed: 'left'}
                    ,{field: 'id',align: 'center', width: 200, title: '主键',sort: true,hide:true}
                    ,{field: 'createTime',align: 'center', width: 200, title: '创建时间',templet: function(d){
                    return common.DateFormat(d.createTime,"yyyy-MM-dd");},sort: true}
            ,{field: 'highFatigueMileage',align: 'center', width: 200, title: '高速疲劳里程',sort: true}
            ,{field: 'highFatigueTime',align: 'center', width: 200, title: '高速疲劳时长',sort: true}
            ,{field: 'highFatigueNum',align: 'center', width: 200, title: '高速疲劳次数',sort: true}
            ,{field: 'highSeriousFatigueMileage',align: 'center', width: 200, title: '高速严重疲劳里程',sort: true}
            ,{field: 'highSeriousFatigueTime',align: 'center', width: 200, title: '高速严重疲劳时长',sort: true}
            ,{field: 'highSeriousFatigueNum',align: 'center', width: 200, title: '高速严重疲劳次数',sort: true}
            ,{field: 'highNightFatigueMileage',align: 'center', width: 200, title: '高速夜间疲劳里程',sort: true}
            ,{field: 'highNightFatigueTime',align: 'center', width: 200, title: '高速夜间疲劳时长',sort: true}
            ,{field: 'highNightFatigueNum',align: 'center', width: 200, title: '高速夜间疲劳次数',sort: true}
            ,{field: 'nationalFatigueMileage',align: 'center', width: 200, title: '国道疲劳里程',sort: true}
            ,{field: 'nationalFatigueTime',align: 'center', width: 200, title: '国道疲劳时长',sort: true}
            ,{field: 'nationalFatigueNum',align: 'center', width: 200, title: '国道疲劳次数',sort: true}
            ,{field: 'nationalSeriousFatigueMileage',align: 'center', width: 200, title: '国道严重疲劳里程',sort: true}
            ,{field: 'nationalSeriousFatigueTime',align: 'center', width: 200, title: '国道严重疲劳时长',sort: true}
            ,{field: 'nationalSeriousFatigueNum',align: 'center', width: 200, title: '国道严重疲劳次数',sort: true}
            ,{field: 'nationalNightFatigueMileage',align: 'center', width: 200, title: '国道夜间疲劳里程',sort: true}
            ,{field: 'nationalNightFatigueTime',align: 'center', width: 200, title: '国道夜间疲劳时长',sort: true}
            ,{field: 'nationalNightFatigueNum',align: 'center', width: 200, title: '国道夜间疲劳次数',sort: true}
            ,{field: 'otherFatigueMileage',align: 'center', width: 200, title: '其他道路疲劳里程',sort: true}
            ,{field: 'otherFatigueTime',align: 'center', width: 200, title: '其他道路疲劳时长',sort: true}
            ,{field: 'otherFatigueNum',align: 'center', width: 200, title: '其他道路疲劳次数',sort: true}
            ,{field: 'otherSeriousFatigueMileage',align: 'center', width: 200, title: '其他道路严重疲劳里程',sort: true}
            ,{field: 'otherSeriousFatigueTime',align: 'center', width: 200, title: '其他道路严重疲劳时长',sort: true}
            ,{field: 'otherSeriousFatigueNum',align: 'center', width: 200, title: '其他道路严重疲劳次数',sort: true}
            ,{field: 'otherNightFatigueMileage',align: 'center', width: 200, title: '其他道路夜间疲劳里程',sort: true}
            ,{field: 'otherNightFatigueTime',align: 'center', width: 200, title: '其他道路夜间疲劳时长',sort: true}
            ,{field: 'otherNightFatigueNum',align: 'center', width: 200, title: '其他道路夜间疲劳次数',sort: true}
            ,{field: 'sumFatigueMileage',align: 'center', width: 200, title: '疲劳总里程',sort: true}
            ,{field: 'sumFatigueTime',align: 'center', width: 200, title: '疲劳总时长',sort: true}
            ,{field: 'sumFatigueNum',align: 'center', width: 200, title: '疲劳总次数',sort: true}
            ,{field: 'sumSeriousFatigueMileage',align: 'center', width: 200, title: '严重疲劳总里程',sort: true}
            ,{field: 'sumSeriousFatigueTime',align: 'center', width: 200, title: '严重疲劳总时长',sort: true}
            ,{field: 'sumSeriousFatigueNum',align: 'center', width: 200, title: '其他道路严重疲劳次数',sort: true}
            ,{field: 'sumNightFatigueMileage',align: 'center', width: 200, title: '夜间疲劳总里程',sort: true}
            ,{field: 'sumNightFatigueTime',align: 'center', width: 200, title: '夜间疲劳总时长',sort: true}
            ,{field: 'sumNightFatigueNum',align: 'center', width: 200, title: '夜间疲劳总次数',sort: true}
            ,{field: 'nationalFatigueRate',align: 'center', width: 200, title: '国道疲劳占比',sort: true}
            ,{field: 'nationalfatigueflAg',align: 'center', width: 200, title: '国道疲劳标识',sort: true}
            ,{field: 'highFatigueRate',align: 'center', width: 200, title: '高速疲劳占比',sort: true}
            ,{field: 'highfatigueflAg',align: 'center', width: 200, title: '高速疲劳标识',sort: true}
            ,{field: 'otherFatigueRate',align: 'center', width: 200, title: '其他道路疲劳占比',sort: true}
            ,{field: 'otherfatigueflAg',align: 'center', width: 200, title: '其他道路疲劳标识',sort: true}
            ,{field: 'seriousFatigueRate',align: 'center', width: 200, title: '严重疲劳占比',sort: true}
            ,{field: 'seriousfatigueflAg',align: 'center', width: 200, title: '严重疲劳标识',sort: true}
            ,{field: 'carType',align: 'center', width: 200, title: '车辆类型',sort: true}
                    ,{field: 'countTime',align: 'center', width: 200, title: '统计时间',templet: function(d){
                    return common.DateFormat(d.countTime,"yyyy-MM-dd");},sort: true}
                    ,{title: '操作', minWidth: 150, align: 'center', fixed: 'right', toolbar: '#table-BigdataFatigueAnalysis-list'}
            ]]
            ,autoSort: false
                    ,page: true
                    ,limit: 10
                    ,limits: [10, 20, 30,40]
                    ,text: {
                    none: '暂无相关数据'
                }
            });

                //为toolbar添加事件响应
                table.on('tool(BigdataFatigueAnalysis-list)', function(obj){ //注：tool是工具条事件名，test是table原始容器的属性 lay-filter="对应的值"
                    /*var data = obj.data;*///获得当前行数据
                    //区分事件
                    switch(obj.event){
                        case 'del':
                            deleteVo(obj);
                            break;
                        case 'edit':
                            editVo(obj);
                            break;
                    };
                });

                //监听排序事件
                table.on('sort(BigdataFatigueAnalysis-list)', function(obj){ //注：sort是工具条事件名，LAY-app-province-list是table原始容器的属性 lay-filter="对应的值"
                    var sort = obj.field;
                    //默认排序
                    switch(obj.field){
                        case 'id':
                            sort ="ID";
                            break;
                        case 'createTime':
                            sort ="CREATE_TIME";
                            break;
                        case 'highFatigueMileage':
                            sort ="HIGH_FATIGUE_MILEAGE";
                            break;
                        case 'highFatigueTime':
                            sort ="HIGH_FATIGUE_TIME";
                            break;
                        case 'highFatigueNum':
                            sort ="HIGH_FATIGUE_NUM";
                            break;
                        case 'highSeriousFatigueMileage':
                            sort ="HIGH_SERIOUS_FATIGUE_MILEAGE";
                            break;
                        case 'highSeriousFatigueTime':
                            sort ="HIGH_SERIOUS_FATIGUE_TIME";
                            break;
                        case 'highSeriousFatigueNum':
                            sort ="HIGH_SERIOUS_FATIGUE_NUM";
                            break;
                        case 'highNightFatigueMileage':
                            sort ="HIGH_NIGHT_FATIGUE_MILEAGE";
                            break;
                        case 'highNightFatigueTime':
                            sort ="HIGH_NIGHT_FATIGUE_TIME";
                            break;
                        case 'highNightFatigueNum':
                            sort ="HIGH_NIGHT_FATIGUE_NUM";
                            break;
                        case 'nationalFatigueMileage':
                            sort ="NATIONAL_FATIGUE_MILEAGE";
                            break;
                        case 'nationalFatigueTime':
                            sort ="NATIONAL_FATIGUE_TIME";
                            break;
                        case 'nationalFatigueNum':
                            sort ="NATIONAL_FATIGUE_NUM";
                            break;
                        case 'nationalSeriousFatigueMileage':
                            sort ="NATIONAL_SERIOUS_FATIGUE_MILEAGE";
                            break;
                        case 'nationalSeriousFatigueTime':
                            sort ="NATIONAL_SERIOUS_FATIGUE_TIME";
                            break;
                        case 'nationalSeriousFatigueNum':
                            sort ="NATIONAL_SERIOUS_FATIGUE_NUM";
                            break;
                        case 'nationalNightFatigueMileage':
                            sort ="NATIONAL_NIGHT_FATIGUE_MILEAGE";
                            break;
                        case 'nationalNightFatigueTime':
                            sort ="NATIONAL_NIGHT_FATIGUE_TIME";
                            break;
                        case 'nationalNightFatigueNum':
                            sort ="NATIONAL_NIGHT_FATIGUE_NUM";
                            break;
                        case 'otherFatigueMileage':
                            sort ="OTHER_FATIGUE_MILEAGE";
                            break;
                        case 'otherFatigueTime':
                            sort ="OTHER_FATIGUE_TIME";
                            break;
                        case 'otherFatigueNum':
                            sort ="OTHER_FATIGUE_NUM";
                            break;
                        case 'otherSeriousFatigueMileage':
                            sort ="OTHER_SERIOUS_FATIGUE_MILEAGE";
                            break;
                        case 'otherSeriousFatigueTime':
                            sort ="OTHER_SERIOUS_FATIGUE_TIME";
                            break;
                        case 'otherSeriousFatigueNum':
                            sort ="OTHER_SERIOUS_FATIGUE_NUM";
                            break;
                        case 'otherNightFatigueMileage':
                            sort ="OTHER_NIGHT_FATIGUE_MILEAGE";
                            break;
                        case 'otherNightFatigueTime':
                            sort ="OTHER_NIGHT_FATIGUE_TIME";
                            break;
                        case 'otherNightFatigueNum':
                            sort ="OTHER_NIGHT_FATIGUE_NUM";
                            break;
                        case 'sumFatigueMileage':
                            sort ="SUM_FATIGUE_MILEAGE";
                            break;
                        case 'sumFatigueTime':
                            sort ="SUM_FATIGUE_TIME";
                            break;
                        case 'sumFatigueNum':
                            sort ="SUM_FATIGUE_NUM";
                            break;
                        case 'sumSeriousFatigueMileage':
                            sort ="SUM_SERIOUS_FATIGUE_MILEAGE";
                            break;
                        case 'sumSeriousFatigueTime':
                            sort ="SUM_SERIOUS_FATIGUE_TIME";
                            break;
                        case 'sumSeriousFatigueNum':
                            sort ="SUM_SERIOUS_FATIGUE_NUM";
                            break;
                        case 'sumNightFatigueMileage':
                            sort ="SUM_NIGHT_FATIGUE_MILEAGE";
                            break;
                        case 'sumNightFatigueTime':
                            sort ="SUM_NIGHT_FATIGUE_TIME";
                            break;
                        case 'sumNightFatigueNum':
                            sort ="SUM_NIGHT_FATIGUE_NUM";
                            break;
                        case 'nationalFatigueRate':
                            sort ="NATIONAL_FATIGUE_RATE";
                            break;
                        case 'nationalfatigueflAg':
                            sort ="NATIONAL_FATIGUE_FlAG";
                            break;
                        case 'highFatigueRate':
                            sort ="HIGH_FATIGUE_RATE";
                            break;
                        case 'highfatigueflAg':
                            sort ="HIGH_FATIGUE_FlAG";
                            break;
                        case 'otherFatigueRate':
                            sort ="OTHER_FATIGUE_RATE";
                            break;
                        case 'otherfatigueflAg':
                            sort ="OTHER_FATIGUE_FlAG";
                            break;
                        case 'seriousFatigueRate':
                            sort ="SERIOUS_FATIGUE_RATE";
                            break;
                        case 'seriousfatigueflAg':
                            sort ="SERIOUS_FATIGUE_FlAG";
                            break;
                        case 'carType':
                            sort ="CAR_TYPE";
                            break;
                        case 'countTime':
                            sort ="COUNT_TIME";
                            break;
                    };
                    if(obj.type==null){
                        return;
                    }
                    //有些时候，你可能需要根据当前排序的字段，重新向服务端发送请求，从而实现服务端排序，如：
                    table.reload('BigdataFatigueAnalysis-list', {
                        initSort: obj//记录初始排序，如果不设的话，将无法标记表头的排序状态。
                        ,where: { //请求参数（注意：这里面的参数可任意定义，并非下面固定的格式）
                            orderBy: sort+" "+obj.type //排序字段
                        }
                    });
                });
            }
            defineTable();

            //删除
            deleteVo = function (obj) {
                layer.confirm('确定删除此记录吗？', function(index){
                    admin.req({
                        url:layui.setter.basePath +'/admin/bigdataFatigueAnalysis/deleteByIds.jsn',
                        data:{'ids':obj.data.id},
                        method:"post",
                        success:function (data) {
                            table.reload('BigdataFatigueAnalysis-list',
                                {page:
                                    { curr: common.deleteJumpPage(obj) // 执行页面跳转方法
                                    }
                                }
                            );
                            layer.close(index);
                            layer.msg('删除成功', {
                                icon: 1
                            });
                        },
                    });
                });
            }
            //编辑
            editVo = function (obj) {
                layer.open({
                    type: 2
                    ,title: '编辑'
                    ,content: 'BigdataFatigueAnalysisEdit.html'
                    ,maxmin: true
                    ,area: ['550px', '550px']
                    ,btn: ['确定', '取消']
                    ,success: function(layero, index){
                        var s = layero.find('iframe');
                        $("id",s[0].contentWindow.document).val(obj.data.id);
                        //给iframe元素赋值
                        var othis = layero.find('iframe').contents().find("#BigdataFatigueAnalysis-form").click();

                        othis.find('input[name="id"]').val(obj.data.id);
                        othis.find('input[name="createTime"]').val(obj.data.createTime);
                        othis.find('input[name="highFatigueMileage"]').val(obj.data.highFatigueMileage);
                        othis.find('input[name="highFatigueTime"]').val(obj.data.highFatigueTime);
                        othis.find('input[name="highFatigueNum"]').val(obj.data.highFatigueNum);
                        othis.find('input[name="highSeriousFatigueMileage"]').val(obj.data.highSeriousFatigueMileage);
                        othis.find('input[name="highSeriousFatigueTime"]').val(obj.data.highSeriousFatigueTime);
                        othis.find('input[name="highSeriousFatigueNum"]').val(obj.data.highSeriousFatigueNum);
                        othis.find('input[name="highNightFatigueMileage"]').val(obj.data.highNightFatigueMileage);
                        othis.find('input[name="highNightFatigueTime"]').val(obj.data.highNightFatigueTime);
                        othis.find('input[name="highNightFatigueNum"]').val(obj.data.highNightFatigueNum);
                        othis.find('input[name="nationalFatigueMileage"]').val(obj.data.nationalFatigueMileage);
                        othis.find('input[name="nationalFatigueTime"]').val(obj.data.nationalFatigueTime);
                        othis.find('input[name="nationalFatigueNum"]').val(obj.data.nationalFatigueNum);
                        othis.find('input[name="nationalSeriousFatigueMileage"]').val(obj.data.nationalSeriousFatigueMileage);
                        othis.find('input[name="nationalSeriousFatigueTime"]').val(obj.data.nationalSeriousFatigueTime);
                        othis.find('input[name="nationalSeriousFatigueNum"]').val(obj.data.nationalSeriousFatigueNum);
                        othis.find('input[name="nationalNightFatigueMileage"]').val(obj.data.nationalNightFatigueMileage);
                        othis.find('input[name="nationalNightFatigueTime"]').val(obj.data.nationalNightFatigueTime);
                        othis.find('input[name="nationalNightFatigueNum"]').val(obj.data.nationalNightFatigueNum);
                        othis.find('input[name="otherFatigueMileage"]').val(obj.data.otherFatigueMileage);
                        othis.find('input[name="otherFatigueTime"]').val(obj.data.otherFatigueTime);
                        othis.find('input[name="otherFatigueNum"]').val(obj.data.otherFatigueNum);
                        othis.find('input[name="otherSeriousFatigueMileage"]').val(obj.data.otherSeriousFatigueMileage);
                        othis.find('input[name="otherSeriousFatigueTime"]').val(obj.data.otherSeriousFatigueTime);
                        othis.find('input[name="otherSeriousFatigueNum"]').val(obj.data.otherSeriousFatigueNum);
                        othis.find('input[name="otherNightFatigueMileage"]').val(obj.data.otherNightFatigueMileage);
                        othis.find('input[name="otherNightFatigueTime"]').val(obj.data.otherNightFatigueTime);
                        othis.find('input[name="otherNightFatigueNum"]').val(obj.data.otherNightFatigueNum);
                        othis.find('input[name="sumFatigueMileage"]').val(obj.data.sumFatigueMileage);
                        othis.find('input[name="sumFatigueTime"]').val(obj.data.sumFatigueTime);
                        othis.find('input[name="sumFatigueNum"]').val(obj.data.sumFatigueNum);
                        othis.find('input[name="sumSeriousFatigueMileage"]').val(obj.data.sumSeriousFatigueMileage);
                        othis.find('input[name="sumSeriousFatigueTime"]').val(obj.data.sumSeriousFatigueTime);
                        othis.find('input[name="sumSeriousFatigueNum"]').val(obj.data.sumSeriousFatigueNum);
                        othis.find('input[name="sumNightFatigueMileage"]').val(obj.data.sumNightFatigueMileage);
                        othis.find('input[name="sumNightFatigueTime"]').val(obj.data.sumNightFatigueTime);
                        othis.find('input[name="sumNightFatigueNum"]').val(obj.data.sumNightFatigueNum);
                        othis.find('input[name="nationalFatigueRate"]').val(obj.data.nationalFatigueRate);
                        othis.find('input[name="nationalfatigueflAg"]').val(obj.data.nationalfatigueflAg);
                        othis.find('input[name="highFatigueRate"]').val(obj.data.highFatigueRate);
                        othis.find('input[name="highfatigueflAg"]').val(obj.data.highfatigueflAg);
                        othis.find('input[name="otherFatigueRate"]').val(obj.data.otherFatigueRate);
                        othis.find('input[name="otherfatigueflAg"]').val(obj.data.otherfatigueflAg);
                        othis.find('input[name="seriousFatigueRate"]').val(obj.data.seriousFatigueRate);
                        othis.find('input[name="seriousfatigueflAg"]').val(obj.data.seriousfatigueflAg);
                        othis.find('input[name="carType"]').val(obj.data.carType);
                        othis.find('input[name="countTime"]').val(obj.data.countTime);
                    }
                    ,yes: function(index, layero){
                        var submit = layero.find('iframe').contents().find("#BigdataFatigueAnalysis-form-edit");
                        submit.trigger('click');
                    }
                });
            }

            //点击事件
            var active = {
                //批量删除
                batchdel: function(){
                    var checkStatus = table.checkStatus('BigdataFatigueAnalysis-list')
                        ,checkData = checkStatus.data; //得到选中的数据

                    if(checkData.length === 0){
                        return layer.msg('请选择数据');
                    }

                    layer.confirm('确定删除吗？', function(index) {
                        var ids = "" ;
                        for(var i = 0;i<checkData.length;i++){
                            if(ids==""){
                                ids= checkData[i].id;
                            }else {
                                ids = ids+","+checkData[i].id;
                            }
                        }
                        admin.req({
                            url:layui.setter.basePath +'/admin/bigdataFatigueAnalysis/deleteByIds.jsn',
                            data:{'ids':ids},
                            method:"post",
                            success:function (data) {
                                table.reload('BigdataFatigueAnalysis-list',
                                    {page:
                                        { curr: common.deleteDulJumpPage(checkStatus) // 执行页面跳转方法
                                        }
                                    }
                                );
                                layer.msg('删除成功', {
                                    icon: 1
                                });
                            },
                        });
                    });
                }
                //添加
                ,add: function(){
                    layer.open({
                        type: 2
                        ,title: '添加'
                        ,content: 'BigdataFatigueAnalysisAdd.html'
                        ,maxmin: true
                        ,area: ['550px', '550px']
                        ,btn: ['确定', '取消']
                        ,yes: function(index, layero){
                            //点击确认触发 iframe 内容中的按钮提交
                            var submit = layero.find('iframe').contents().find("#BigdataFatigueAnalysis-form-submit");
                            submit.click();
                        }
                    });
                }
            }
            //绑定点击事件
            $('.layui-btn.layuiadmin-btn-comm').on('click', function(){
                var type = $(this).data('type');
                active[type] ? active[type].call(this) : '';
            });


        });

</script>
</body>
</html>

