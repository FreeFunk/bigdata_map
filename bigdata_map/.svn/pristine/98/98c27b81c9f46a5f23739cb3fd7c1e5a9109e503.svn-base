package com.edgedo.bigdata.service;

import com.edgedo.bigdata.entity.*;
import com.edgedo.bigdata.mapper.BigdataFenxiTeamWeekMapper;
import com.edgedo.bigdata.mapper.BigdataTimeCarDayRecMapper;
import com.edgedo.bigdata.queryvo.BigdataFenxiTeamWeekQuery;
import com.edgedo.bigdata.queryvo.BigdataFenxiTeamWeekView;
import com.edgedo.common.util.Guid;
import com.edgedo.util.DateUtil;
import org.apache.commons.collections.map.HashedMap;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.SimpleDateFormat;
import java.util.*;

@Service
public class BigdataFenxiTeamWeekService {
	
	
	@Autowired
	private BigdataFenxiTeamWeekMapper mapper;
	@Autowired
	private BigdataFenxiTeamDayService bigdataFenxiTeamDayService;
	@Autowired
	private BigdataAlarmRecordService bigdataAlarmRecordService;
	@Autowired
	private BigdataSafetyWarningService bigdataSafetyWarningService;
	@Autowired
	private BigdataTimeCarDayRecMapper bigdataTimeCarDayRecMapper;


	
	public List<BigdataFenxiTeamWeekView> listPage(BigdataFenxiTeamWeekQuery query){
		List list = mapper.listPage(query);
		query.setList(list);
		return list;
	}
	
	/***
	 * 新增方法
	 * @return
	 */
	public String insert(BigdataFenxiTeamWeek voObj) {
		voObj.setId(Guid.guid());
		mapper.insert(voObj);
		return "";
	}
	
	/***
	 * 动态修改方法
	 * @param
	 * @return
	 */
	public String update(BigdataFenxiTeamWeek voObj) {
		mapper.updateById(voObj);
		return "";
	}
	
	/***
	 * 全修改
	 * @param
	 * @return
	 */
	public String updateAll(BigdataFenxiTeamWeek voObj) {
		mapper.updateAllColumnById(voObj);
		return "";
	}
	
	
	
	/**
	 * 单个删除
	 * @param id
	 */
	public int delete(String id) {
		
		return mapper.deleteById(id);
	}
	
	/**
	 * 批量删除
	 * @param ids
	 */
	public int deleteByIds(List<String> ids) {
		
		return mapper.deleteBatchIds(ids);
	}
	
	
	
	/**
	 * 加载单个
	 * @param id
	 */
	public BigdataFenxiTeamWeek loadById(String id) {
		return mapper.selectById(id);
	}


    public List<BigdataFenxiTeamWeek> selectByWeekAnQuanQianShi(String carType, String xianQuId, Integer timeChangeWeek) {
    	return mapper.selectByWeekAnQuanQianShi( carType,  xianQuId,  timeChangeWeek);
	}

	public List<BigdataFenxiTeamWeek> selectByWeekAnQuanHouShi(String carType, String xianQuId, Integer timeChangeWeek) {
		return mapper.selectByWeekAnQuanHouShi( carType,  xianQuId,  timeChangeWeek);
	}

	public List<BigdataFenxiTeamWeek> selectByWeekBaiGongLiQianShi(String carType, String xianQuId, Integer timeChangeWeek) {
		return mapper.selectByWeekBaiGongLiQianShi( carType,  xianQuId,  timeChangeWeek);
	}

	public List<BigdataFenxiTeamWeek> selectByWeekBaiGongLiHouShi(String carType, String xianQuId, Integer timeChangeWeek) {
		return mapper.selectByWeekBaiGongLiHouShi( carType,  xianQuId,  timeChangeWeek);
	}

	public BigdataFenxiTeamWeek selectById(BigdataFenxiTeamWeekQuery query){
		return mapper.selectById(query);
	}

	public void insertOrUpdate(TransitCarTeam team, int weekYear, int weekOfYear, Date beginDate, Date endDate) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
		String beginDateStr = sdf.format(beginDate);
		Integer countDate = Integer.parseInt(beginDateStr);
		Integer countMonth = Integer.parseInt(beginDateStr)/100;
		Map<String,Object> map = new HashedMap();
		map.put("teamId",team.getId());
		//统计该车的记录
		BigdataFenxiTeamWeek bigdataFenxiTeamWeek = new BigdataFenxiTeamWeek();
		bigdataFenxiTeamWeek.setId(Guid.guid());
		bigdataFenxiTeamWeek.setProvinceId(team.getProvinceId());
		bigdataFenxiTeamWeek.setProvinceName(team.getProvinceName());
		bigdataFenxiTeamWeek.setCityId(team.getCityId());
		bigdataFenxiTeamWeek.setCityName(team.getCityName());
		bigdataFenxiTeamWeek.setXianquId(team.getXianquId());
		bigdataFenxiTeamWeek.setXianquName(team.getXianquName());
		bigdataFenxiTeamWeek.setTeamId(team.getId());
		bigdataFenxiTeamWeek.setTeamName(team.getTeamName());
		bigdataFenxiTeamWeek.setTeamType(team.getCompanyLevel());
		bigdataFenxiTeamWeek.setTransitType(getTransitTypeText(team.getCompanyLevel()));
		bigdataFenxiTeamWeek.setCountWeek(weekOfYear);
		bigdataFenxiTeamWeek.setStartCountDate(beginDate);
		bigdataFenxiTeamWeek.setEndCountDate(endDate);
		bigdataFenxiTeamWeek.setCountDate(countDate);
		bigdataFenxiTeamWeek.setCountMonth(countMonth);
		bigdataFenxiTeamWeek.setYearNum(weekYear);
		map.put("beginDate",beginDate);
		map.put("endDate",endDate);
		map.put("countMonth",countMonth);
		map.put("yearNum",weekYear);
		//COUNT_CAR_NUM 统计车辆数 RUN_MILEAGE 行驶里程 行驶时长（分）RUN_TIME_LENGTH
        //行驶时长(小时）RUN_TIME_LENGTH_HOUR 报警数量 ALARM_NUM
        BigdataFenxiTeamWeek bigdataFenxiTeamWeek1 = bigdataFenxiTeamDayService.countMileageByWeek(map);
		if(bigdataFenxiTeamWeek1==null){
			bigdataFenxiTeamWeek1 = new BigdataFenxiTeamWeek();
		}
		bigdataFenxiTeamWeek.setCountCarNum(bigdataFenxiTeamWeek1.getCountCarNum());//统计车辆数
        bigdataFenxiTeamWeek.setAlarmRate(getBaoJingAndBaiGongLi(bigdataFenxiTeamWeek1.getAlarmNum(),bigdataFenxiTeamWeek1.getRunMileage()));//报警数量/百公里
        bigdataFenxiTeamWeek.setAverageSpeed(getAverageSpeed(bigdataFenxiTeamWeek1.getRunMileage(),bigdataFenxiTeamWeek1.getRunTimeLengthHour()));//平均速度
        bigdataFenxiTeamWeek.setAverageRunMileage(getAverageRunMileage(bigdataFenxiTeamWeek1.getRunMileage(),bigdataFenxiTeamWeek1.getCountCarNum()));//平均行驶里程
        bigdataFenxiTeamWeek.setAverageRunTimeLength(getAverageRunTimeLength(bigdataFenxiTeamWeek1.getRunTimeLengthHour(),bigdataFenxiTeamWeek1.getCountCarNum()));//平均行驶时长
        bigdataFenxiTeamWeek.setAverageAlarmNum(getAverageAlarmNum(bigdataFenxiTeamWeek1.getAlarmNum(),bigdataFenxiTeamWeek1.getCountCarNum()));//平均报警数
        //23 34 45 56
		BigDecimal runMileage = bigdataFenxiTeamWeek1.getRunMileage();
		if(runMileage==null){
			runMileage = new BigDecimal("0");
		}
		bigdataFenxiTeamWeek.setRunMileage(runMileage);//行驶里程
		Integer runTimeLength = bigdataFenxiTeamWeek1.getRunTimeLength();
		if(runTimeLength==null){
			runTimeLength = 0;
		}
		//转为小时分
		int hours = (int) Math.floor(runTimeLength / 60);
		int minute = runTimeLength % 60;
		String runTimeLengthText = hours+"小时"+minute+"分钟";
		bigdataFenxiTeamWeek.setRunTimeLengthText(runTimeLengthText);//行驶时长文本
		//转为小时
		bigdataFenxiTeamWeek.setRunTimeLengthHour(bigdataFenxiTeamWeek1.getRunTimeLengthHour());//行驶时长(小时）
		bigdataFenxiTeamWeek.setRunTimeLength(runTimeLength);//行驶时长（分）
		Integer alarmNum = bigdataFenxiTeamWeek1.getAlarmNum();
		if(alarmNum==null){
			alarmNum = 0;
		}
		bigdataFenxiTeamWeek.setAlarmNum(alarmNum);//报警数量
		//行驶里程前三名
		//map (beginDate endDate countMonth yearNum teamId)
		List<BigdataTimeCarDayRec> list = bigdataTimeCarDayRecMapper.selectByWeekCountTop(map);
		bigdataFenxiTeamWeek.setRunMileageTopThree(getRunMileageTopThreeText(list));
		//报警数量前三名
		bigdataFenxiTeamWeek.setAlarmNumTopThree(getAlarmNumTopThreeText(list));

		//统计报警的数量
		//报警信息周统计
		List<AlarmVo> alarmVoList = new ArrayList<>();
		List<AlarmVo> safetyWarningList = new ArrayList<>();
		String teamTransitType = bigdataFenxiTeamWeek.getTransitType();
//		if(teamTransitType!=null && !teamTransitType.equals("")){
//			//分段限速
//			alarmVoList = bigdataAlarmRecordService.countByTeamTransitType(map);
//			//主动安全
//			safetyWarningList = bigdataSafetyWarningService.countByTeamTransitType(map);
//		}
		//查询记录是否存在
		BigdataFenxiTeamWeek bigdataFenxiTeamWeek3 = mapper.selectByFenqu(map);
		if(bigdataFenxiTeamWeek3==null){
			bigdataFenxiTeamWeek.setCreateTime(new Date());
			mapper.insert(bigdataFenxiTeamWeek);
		}else {
			bigdataFenxiTeamWeek.setId(bigdataFenxiTeamWeek3.getId());
			bigdataFenxiTeamWeek.setUpdateTime(new Date());
			mapper.updateByfenPian(bigdataFenxiTeamWeek);
		}
		//分段限速报警统计
//		for (AlarmVo a:alarmVoList){
//			BigdataFenxiCarAlarmWeek bigdataFenxiCarAlarmWeek = new BigdataFenxiCarAlarmWeek();
//			bigdataFenxiCarAlarmWeek.setOwnerCarDayId(bigdataFenxiCarWeek.getId());
//			bigdataFenxiCarAlarmWeek.setAlarmNum(a.getAlarmNum());
//			if(runMileage.compareTo(BigDecimal.ZERO)==0){
//				bigdataFenxiCarAlarmWeek.setAlarmRate(new BigDecimal("0"));
//			}else {
//				bigdataFenxiCarAlarmWeek.setAlarmRate(new BigDecimal(a.getAlarmNum()).divide(runMileage,2, RoundingMode.HALF_UP));
//			}
//			bigdataFenxiCarAlarmWeek.setAlarmType(a.getAlarmType());
//			bigdataFenxiCarAlarmWeek.setAlarmTypeDesc(getAlarmTypeDesc(a.getAlarmType()));
//			bigdataFenxiCarAlarmWeek.setCountDate(countDate);
//			bigdataFenxiCarAlarmWeek.setCountWeek(weekOfYear);
//			bigdataFenxiCarAlarmWeek.setStartCountDate(beginDate);
//			bigdataFenxiCarAlarmWeek.setEndCountDate(endDate);
//			bigdataFenxiCarAlarmWeek.setCountMonth(countMonth);
//			bigdataFenxiCarAlarmWeek.setYearNum(weekYear);
//			bigdataFenxiCarAlarmWeekService.insertOrUpdate(bigdataFenxiCarAlarmWeek);
//		}
//		//主动安全报警统计
//		for (AlarmVo a:safetyWarningList){
//			BigdataFenxiCarAlarmWeek bigdataFenxiCarAlarmWeek = new BigdataFenxiCarAlarmWeek();
//			bigdataFenxiCarAlarmWeek.setOwnerCarDayId(bigdataFenxiCarWeek.getId());
//			bigdataFenxiCarAlarmWeek.setAlarmNum(a.getAlarmNum());
//			if(runMileage.compareTo(BigDecimal.ZERO)==0){
//				bigdataFenxiCarAlarmWeek.setAlarmRate(new BigDecimal("0"));
//			}else {
//				bigdataFenxiCarAlarmWeek.setAlarmRate(new BigDecimal(a.getAlarmNum()).divide(runMileage,2, RoundingMode.HALF_UP));
//			}
//			bigdataFenxiCarAlarmWeek.setAlarmType(getSafeType(a.getAlarmType()));
//			bigdataFenxiCarAlarmWeek.setAlarmTypeDesc(a.getAlarmType());
//			bigdataFenxiCarAlarmWeek.setCountDate(countDate);
//			bigdataFenxiCarAlarmWeek.setCountWeek(weekOfYear);
//			bigdataFenxiCarAlarmWeek.setStartCountDate(beginDate);
//			bigdataFenxiCarAlarmWeek.setEndCountDate(endDate);
//			bigdataFenxiCarAlarmWeek.setCountMonth(countMonth);
//			bigdataFenxiCarAlarmWeek.setYearNum(weekYear);
//			bigdataFenxiCarAlarmWeekService.insertOrUpdate(bigdataFenxiCarAlarmWeek);
//		}
	}

	//查询7天之内的报警前三的车辆
	private String getAlarmNumTopThreeText(List<BigdataTimeCarDayRec> list) {
		if(list.size()==0){
			return "无";
		}else {
			String str = "";
			//取前三
			Collections.sort(list, new Comparator<BigdataTimeCarDayRec>(){
				@Override
				public int compare(BigdataTimeCarDayRec o1, BigdataTimeCarDayRec o2) {
					//按照Person的年龄进行升序排列
					if(o1.getSumMileage().compareTo(o2.getSumMileage())==-1){//o1小于o2
						return 1;
					}
					if(o1.getSumMileage().compareTo(o2.getSumMileage())==0){//==
						return 0;
					}
					return -1;
				}
			});
			Collections.reverse(list);//倒序  报警数越低越好
			if(list.size()>=3){
				//遍历取前三个
				for(int i = 0;i<3;i++){
					if(i==0){
						String mlieage = list.get(i).getSumMileage().toString();//行驶里程
						String carNum = list.get(i).getCarPlateNum();//车牌号
						str = carNum+"("+mlieage+")";
					}else {
						String mlieage = list.get(i).getSumMileage().toString();//行驶里程
						String carNum = list.get(i).getCarPlateNum();//车牌号
						str = str+"，"+carNum+"("+mlieage+")";
					}
				}
				return str;
			}else {
				//遍历取前三个
				for(int i = 0;i<list.size();i++){
					if(i==0){
						String mlieage = list.get(i).getSumMileage().toString();//行驶里程
						String carNum = list.get(i).getCarPlateNum();//车牌号
						str = carNum+"("+mlieage+")";
					}else {
						String mlieage = list.get(i).getSumMileage().toString();//行驶里程
						String carNum = list.get(i).getCarPlateNum();//车牌号
						str = str+"，"+carNum+"("+mlieage+")";
					}
				}
				return str;
			}
		}
	}

	//查询7天之内的里程前三的车辆
	private String getRunMileageTopThreeText(List<BigdataTimeCarDayRec> list) {
		if(list.size()==0){
			return "无";
		}else {
			String str = "";
			//取前三
			Collections.sort(list, new Comparator<BigdataTimeCarDayRec>(){
				@Override
				public int compare(BigdataTimeCarDayRec o1, BigdataTimeCarDayRec o2) {
					//按照Person的年龄进行升序排列
					if(o1.getSumMileage().compareTo(o2.getSumMileage())==-1){//o1小于o2
						return 1;
					}
					if(o1.getSumMileage().compareTo(o2.getSumMileage())==0){//==
						return 0;
					}
					return -1;
				}
			});
			if(list.size()>=3){
				//遍历取前三个
				for(int i = 0;i<3;i++){
					if(i==0){
						String mlieage = list.get(i).getSumMileage().toString();//行驶里程
						String carNum = list.get(i).getCarPlateNum();//车牌号
						str = carNum+"("+mlieage+")";
					}else {
						String mlieage = list.get(i).getSumMileage().toString();//行驶里程
						String carNum = list.get(i).getCarPlateNum();//车牌号
						str = str+"，"+carNum+"("+mlieage+")";
					}
				}
				return str;
			}else {
				//遍历取前三个
				for(int i = 0;i<list.size();i++){
					if(i==0){
						String mlieage = list.get(i).getSumMileage().toString();//行驶里程
						String carNum = list.get(i).getCarPlateNum();//车牌号
						str = carNum+"("+mlieage+")";
					}else {
						String mlieage = list.get(i).getSumMileage().toString();//行驶里程
						String carNum = list.get(i).getCarPlateNum();//车牌号
						str = str+"，"+carNum+"("+mlieage+")";
					}
				}
				return str;
			}
		}
	}

	private String getTransitTypeText(String teamType){
		if(teamType !=null && teamType.equals("TEAM_KY")){
			return "客运";
		}else if(teamType !=null && teamType.equals("TEAM_WXHWYS")){
			return "危货";
		}else{
			return "普货";
		}
	}

    //计算报警数量/百公里
    private BigDecimal getBaoJingAndBaiGongLi(Integer baoJingNum, BigDecimal runMileage) {
        //a.divide(b, 2, RoundingMode.HALF_UP)
        if(runMileage.compareTo(BigDecimal.ZERO)==0){
            return new BigDecimal(0);
        }else {
            BigDecimal bigDecimalBaoJingNum = new BigDecimal(baoJingNum);
            BigDecimal bigDecimal = bigDecimalBaoJingNum.divide(runMileage,2, RoundingMode.HALF_UP);
            return bigDecimal;
        }
    }

    //计算平均速度
    private BigDecimal getAverageSpeed(BigDecimal runMileage, BigDecimal runTimeMinuter) {
        if(runTimeMinuter.compareTo(BigDecimal.ZERO)==0){
            return new BigDecimal(0);
        }else {
            BigDecimal bigDecimal = runMileage.divide(runTimeMinuter,2, RoundingMode.HALF_UP);
            return bigDecimal;
        }
    }

    //计算平均报警数量
    private BigDecimal getAverageAlarmNum(Integer baoJingNum, Integer sumNum) {
        if(sumNum==0){
            return new BigDecimal(0);
        }else {
            BigDecimal bigDecimalBaoJingNum = new BigDecimal(baoJingNum);
            BigDecimal bigDecimalCarNum = new BigDecimal(sumNum);
            BigDecimal bigDecimal = bigDecimalBaoJingNum.divide(bigDecimalCarNum,2, RoundingMode.HALF_UP);
            return bigDecimal;
        }
    }

    //计算平均行驶时长（小时）
    private BigDecimal getAverageRunTimeLength(BigDecimal runTimeMinuter, Integer sumNum) {
        if(sumNum==0){
            return new BigDecimal(0);
        }else {
            BigDecimal bigDecimalCarNum = new BigDecimal(sumNum);
            BigDecimal bigDecimal = runTimeMinuter.divide(bigDecimalCarNum,2, RoundingMode.HALF_UP);
            return bigDecimal;
        }
    }

    //计算平均行驶里程
    private BigDecimal getAverageRunMileage(BigDecimal runMileage, Integer sumNum) {
        if(sumNum==0){
            return new BigDecimal(0);
        }else {
            BigDecimal bigDecimalCarNum = new BigDecimal(sumNum);
            BigDecimal bigDecimal = runMileage.divide(bigDecimalCarNum,2, RoundingMode.HALF_UP);
            return bigDecimal;
        }
    }
}
